{
  "compilerOptions": {
    /* 访问 https://aka.ms/tsconfig 阅读更多关于此文件的信息 */

    /* 项目配置 (Projects) */
    // "incremental": true,                              /* 启用增量编译，保存 .tsbuildinfo 文件 */
    "composite": true /* 启用组合项目支持，允许使用项目引用 */,
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* 指定 .tsbuildinfo 增量编译文件路径 */
    // "disableSourceOfProjectReferenceRedirect": true,  /* 禁止在引用组合项目时优先使用源文件而不是声明文件 */
    // "disableSolutionSearching": true,                 /* 编辑时排除多项目引用检查 */
    // "disableReferencedProjectLoad": true,             /* 减少 TypeScript 自动加载的项目数量 */

    /* 语言和环境配置 (Language and Environment) */
    "target": "es2016" /* 设置生成的 JavaScript 版本以及包含的库声明 */,
    // "lib": [],                                        /* 指定目标运行环境的库声明文件 */
    // "jsx": "preserve",                                /* 指定生成的 JSX 代码类型 */
    // "libReplacement": true,                           /* 启用 lib 替换 */
    // "experimentalDecorators": true,                   /* 启用实验性装饰器支持 */
    // "emitDecoratorMetadata": true,                    /* 为源文件中的装饰声明生成元数据 */
    // "jsxFactory": "",                                 /* 指定 React JSX 生成的工厂函数 */
    // "jsxFragmentFactory": "",                         /* 指定 React JSX Fragment 引用 */
    // "jsxImportSource": "",                            /* 指定导入 JSX 工厂函数的模块 */
    // "reactNamespace": "",                             /* 指定 'createElement' 调用的对象 */
    // "noLib": true,                                    /* 禁止包含任何库文件 */
    "useDefineForClassFields": true /* 生成符合 ECMAScript 标准的类字段 */,
    "moduleDetection": "force" /* 控制检测模块格式的方法 */,

    /* 模块配置 (Modules) */
    "module": "ESNext" /* 指定生成的模块代码类型 */,
    // "rootDir": "./",                                  /* 指定源文件根目录 */
    // "moduleResolution": "node10",                     /* 指定模块解析方式 */
    // "baseUrl": "./",                                  /* 指定非相对模块名解析的基础目录 */
    // "paths": {},                                      /* 指定重新映射导入路径 */
    // "rootDirs": [],                                   /* 允许将多个目录视为一个目录进行模块解析 */
    // "typeRoots": [],                                  /* 指定 '@types' 类型定义文件的查找目录 */
    // "types": [],                                      /* 指定无需引用即可包含的类型包名称 */
    // "allowUmdGlobalAccess": true,                     /* 允许从模块访问 UMD 全局变量 */
    // "moduleSuffixes": [],                             /* 解析模块时搜索的文件后缀列表 */
    // "allowImportingTsExtensions": true,               /* 允许导入包含 TypeScript 扩展名的文件 */
    // "rewriteRelativeImportExtensions": true,          /* 将相对导入路径中的 '.ts', '.tsx' 等扩展名重写为 JavaScript 扩展名 */
    // "resolvePackageJsonExports": true,                /* 使用 package.json 的 'exports' 字段解析包导入 */
    // "resolvePackageJsonImports": true,                /* 使用 package.json 的 'imports' 字段解析导入 */
    // "customConditions": [],                           /* 在解析导入时设置的额外条件 */
    "noUncheckedSideEffectImports": true /* 检查副作用导入 */,
    // "resolveJsonModule": true,                        /* 启用导入 .json 文件 */
    // "allowArbitraryExtensions": true,                 /* 启用导入任意扩展名文件（需有声明文件） */
    // "noResolve": true,                                /* 禁止扩展导入、require 或 reference 的文件数量 */

    /* JavaScript 支持 */
    // "allowJs": true,                                  /* 允许 JavaScript 文件参与编译 */
    // "checkJs": true,                                  /* 启用 JavaScript 文件的错误报告 */
    // "maxNodeModuleJsDepth": 1,                        /* 指定检查 node_modules 中 JS 文件的最大深度 */

    /* 输出配置 */
    // "declaration": true,                              /* 生成 .d.ts 类型声明文件 */
    // "declarationMap": true,                           /* 为 d.ts 文件生成 source map */
    // "emitDeclarationOnly": true,                      /* 只输出 d.ts 文件，不输出 JavaScript 文件 */
    // "sourceMap": true,                                /* 为生成的 JavaScript 文件创建 source map */
    // "inlineSourceMap": true,                          /* 将 source map 内嵌到生成的 JavaScript 中 */
    // "noEmit": true,                                   /* 禁止生成输出文件 */
    // "outFile": "./",                                  /* 指定输出 JavaScript 文件的合并路径 */
    // "outDir": "./",                                   /* 指定所有输出文件的输出目录 */
    // "removeComments": true,                           /* 不生成注释 */
    // "importHelpers": true,                            /* 从 tslib 导入辅助函数，避免重复生成 */
    // "downlevelIteration": true,                       /* 生成更兼容但性能较差的迭代代码 */
    // "sourceRoot": "",                                 /* 指定调试器查找源代码的根路径 */
    // "mapRoot": "",                                    /* 指定调试器查找 map 文件的位置 */
    // "inlineSources": true,                            /* 将源代码内嵌到 sourcemaps 中 */
    // "emitBOM": true,                                  /* 在输出文件开头添加 UTF-8 BOM */
    // "newLine": "crlf",                                /* 设置生成文件的换行符 */
    // "stripInternal": true,                            /* 不生成带有 '@internal' 注释的声明 */
    // "noEmitHelpers": true,                            /* 不生成 '__extends' 等辅助函数 */
    // "noEmitOnError": true,                            /* 如果存在类型错误，则不生成文件 */
    // "preserveConstEnums": true,                       /* 保留 'const enum' 声明 */
    // "declarationDir": "./",                           /* 指定生成的声明文件输出目录 */

    /* 互操作约束 (Interop Constraints) */
    "isolatedModules": true /* 确保每个文件可以独立转译 */,
    // "verbatimModuleSyntax": true,                     /* 不转换或省略未标记为 type-only 的导入/导出 */
    // "isolatedDeclarations": true,                     /* 要求导出有足够的注解以便其他工具生成声明文件 */
    // "erasableSyntaxOnly": true,                       /* 不允许非 ECMAScript 的运行时构造 */
    // "allowSyntheticDefaultImports": true,             /* 当模块没有默认导出时允许 'import x from y' */
    "esModuleInterop": true /* 启用对 CommonJS 模块的默认导入支持 */,
    // "preserveSymlinks": true,                         /* 不解析符号链接的真实路径 */
    "forceConsistentCasingInFileNames": true /* 确保导入路径的大小写正确 */,

    /* 类型检查 (Type Checking) */
    "strict": true /* 启用所有严格类型检查选项 */,
    // "noImplicitAny": true,                            /* 报告隐式 'any' 类型的表达式和声明 */
    // "strictNullChecks": true,                         /* 类型检查时考虑 'null' 和 'undefined' */
    // "strictFunctionTypes": true,                      /* 分配函数时检查参数和返回值是否兼容 */
    // "strictBindCallApply": true,                      /* 检查 'bind', 'call', 'apply' 方法的参数是否匹配 */
    // "strictPropertyInitialization": true,             /* 检查类属性是否在构造函数中初始化 */
    // "strictBuiltinIteratorReturn": true,              /* 内置迭代器的 TReturn 类型为 undefined */
    // "noImplicitThis": true,                           /* 报告 'this' 类型为 'any' 的情况 */
    // "useUnknownInCatchVariables": true,               /* 默认 catch 变量为 'unknown' 类型 */
    // "alwaysStrict": true,                             /* 确保始终生成 'use strict' */
    "noUnusedLocals": true /* 报告未使用的局部变量 */,
    // "noUnusedParameters": true /* 报告未使用的函数参数 */,
    // "exactOptionalPropertyTypes": true,               /* 按照原意解释可选属性类型 */
    // "noImplicitReturns": true,                        /* 报告函数中未显式返回的情况 */
    // "noFallthroughCasesInSwitch": true,               /* 报告 switch 语句中的穿透情况 */
    // "noUncheckedIndexedAccess": true,                 /* 使用索引访问时自动添加 'undefined' 类型 */
    // "noImplicitOverride": true,                       /* 确保派生类中覆盖成员使用 override 修饰符 */
    // "noPropertyAccessFromIndexSignature": true,       /* 强制使用索引访问器访问索引类型键 */
    // "allowUnusedLabels": true,                        /* 禁用未使用标签的错误报告 */
    // "allowUnreachableCode": true,                     /* 禁用不可达代码的错误报告 */

    /* 完整性 (Completeness) */
    // "skipDefaultLibCheck": true,                      /* 跳过 TypeScript 默认库文件的类型检查 */
    "skipLibCheck": true /* 跳过所有 .d.ts 文件的类型检查 */
  }
}
